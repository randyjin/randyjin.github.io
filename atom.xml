<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿骨打</title>
  <subtitle>不是完颜的那个</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-03-24T01:23:49.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>阿骨打</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java使用Arrays asList需要注意了</title>
    <link href="http://yoursite.com/2017/03/23/java-Arrays-asList/"/>
    <id>http://yoursite.com/2017/03/23/java-Arrays-asList/</id>
    <published>2017-03-23T11:43:06.000Z</published>
    <updated>2017-03-24T01:23:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="java-Arrays-asList"><a href="#java-Arrays-asList" class="headerlink" title="java Arrays.asList"></a>java Arrays.asList</h2><blockquote>
<p><code>Arrays.asList</code>相信搞java的基本都用过，但有些坑不一定踩过</p>
</blockquote>
<h3 id="坑一"><a href="#坑一" class="headerlink" title="坑一"></a>坑一</h3><ul>
<li><code>Arrays.asList</code>返回的List不能进行<code>add</code>和<code>remove</code>操作，为什么呢，来看看源码就明白了<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SafeVarargs</span></div><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"varargs"</span>)</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">asList</span><span class="params">(T... a)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(a);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>在这里看，似乎没什么问题，返回一个ArrayList，那怎么就不能进行<code>add</code>和<code>remove</code>操作了呢,且看下面代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></div><div class="line">        <span class="keyword">implements</span> <span class="title">RandomAccess</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> &#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">2764017481108945198L</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> E[] a;</div><div class="line">    ArrayList(E[] array) &#123;</div><div class="line">        a = Objects.requireNonNull(array);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> a.length;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> Object[] toArray() &#123;</div><div class="line">        <span class="keyword">return</span> a.clone();</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</div><div class="line">        <span class="keyword">int</span> size = size();</div><div class="line">        <span class="keyword">if</span> (a.length &lt; size)</div><div class="line">            <span class="keyword">return</span> Arrays.copyOf(<span class="keyword">this</span>.a, size,</div><div class="line">                                 (Class&lt;? extends T[]&gt;) a.getClass());</div><div class="line">        System.arraycopy(<span class="keyword">this</span>.a, <span class="number">0</span>, a, <span class="number">0</span>, size);</div><div class="line">        <span class="keyword">if</span> (a.length &gt; size)</div><div class="line">            a[size] = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">return</span> a;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> a[index];</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</div><div class="line">        E oldValue = a[index];</div><div class="line">        a[index] = element;</div><div class="line">        <span class="keyword">return</span> oldValue;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        E[] a = <span class="keyword">this</span>.a;</div><div class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++)</div><div class="line">                <span class="keyword">if</span> (a[i] == <span class="keyword">null</span>)</div><div class="line">                    <span class="keyword">return</span> i;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++)</div><div class="line">                <span class="keyword">if</span> (o.equals(a[i]))</div><div class="line">                    <span class="keyword">return</span> i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> indexOf(o) != -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Spliterator&lt;E&gt; <span class="title">spliterator</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Spliterators.spliterator(a, Spliterator.ORDERED);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span> </span>&#123;</div><div class="line">        Objects.requireNonNull(action);</div><div class="line">        <span class="keyword">for</span> (E e : a) &#123;</div><div class="line">            action.accept(e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">replaceAll</span><span class="params">(UnaryOperator&lt;E&gt; operator)</span> </span>&#123;</div><div class="line">        Objects.requireNonNull(operator);</div><div class="line">        E[] a = <span class="keyword">this</span>.a;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</div><div class="line">            a[i] = operator.apply(a[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> E&gt; c)</span> </span>&#123;</div><div class="line">        Arrays.sort(a, c);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>原来<code>Arrays.asList</code>调用以后生成的<code>ArrayList</code>其实是<code>Arrays</code>的内部类对象，这个类继承了<code>AbstractList</code>，这个List的抽象类对get和remove方法都是需要子类自己实现的，来看看<code>AbstractList</code>的add和remove方法的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">    add(size(), e);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>看到这里就明白了；具体这个ArrayList能做哪些操作，看看他提供出来的API就行了</p>
<h3 id="坑二"><a href="#坑二" class="headerlink" title="坑二"></a>坑二</h3><ul>
<li>Arrays.asList传入参数是基本类型的话，会把数组当做一个元素，看debug结果：<br><img src="/images/WX20170324.png" alt="Alt text"></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;java-Arrays-asList&quot;&gt;&lt;a href=&quot;#java-Arrays-asList&quot; class=&quot;headerlink&quot; title=&quot;java Arrays.asList&quot;&gt;&lt;/a&gt;java Arrays.asList&lt;/h2&gt;&lt;blockquo
    
    </summary>
    
      <category term="java坑" scheme="http://yoursite.com/categories/java%E5%9D%91/"/>
    
    
      <category term="java Arrays.asList" scheme="http://yoursite.com/tags/java-Arrays-asList/"/>
    
  </entry>
  
  <entry>
    <title>vim的一些操作技巧</title>
    <link href="http://yoursite.com/2017/01/04/vi-op/"/>
    <id>http://yoursite.com/2017/01/04/vi-op/</id>
    <published>2017-01-04T14:17:28.000Z</published>
    <updated>2017-01-04T14:24:36.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>很多时候需要用到vim，特别是查日志，学习一些常用的vim技巧还是很有必要的</p>
</blockquote>
<h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><ul>
<li>h/j/k/l：分别表示向左/向下/向上/向右移动光标</li>
<li>shift+g：到最后</li>
<li>ctrl+f：向前一页</li>
<li>ctrl+b：向后一页</li>
<li>ctrl+d：向前半页</li>
<li>ctrl+u：向后半页</li>
<li>ctrl+e：向上滚动</li>
<li>ctrl+y：向下滚动</li>
<li>x：删除当前光标所在的字符</li>
<li>dd：删除一行</li>
<li>J：删除当前行的换行符，两行合并一行</li>
<li>u：撤销上一次操作</li>
<li>ctrl+r：重做</li>
<li>a：追加输入</li>
<li>o：在当前行后另起一行输入</li>
<li>ZZ：保存并退出</li>
<li>q!：放弃编辑并退出</li>
<li>G：跳转到最后一行</li>
<li>gg：跳转到第一行</li>
<li>e!：放弃所有修改重新编辑</li>
<li>help {subject}：帮助文档</li>
<li>w：向后移动一个单词</li>
<li>3w：向后移动三个单词</li>
<li>b：向前移动一个单词</li>
<li>3b：向前移动三个单词</li>
<li>e：光标移动到下一个单词的最后一个字符</li>
<li>3e：光标移动到后三个单词的最后一个字符</li>
<li>ge：光标移动到上一个单词的最后一个字符</li>
<li>3ge：光标移动到前三个单词的最后一个字</li>
<li>$：移动到行尾</li>
<li>0/^：移动到行首</li>
<li>[n]fh：移动到h的单词上</li>
<li>[n]Fh：反向搜索</li>
<li>%：匹配括号</li>
<li>[n]G：定位到到n行</li>
<li>[n]%：定位到百分之n行</li>
<li>H,M,L：分别跳转到当前屏幕的第一行，中间行，最后一行</li>
<li>ctrl+g：显示当前光标所在位置</li>
<li>set number：显示行号</li>
<li>set nonumber：不显示行号</li>
<li>set ruler：一直显示光标位置</li>
<li>zz：把当前行放到屏幕正中央</li>
<li>zt：把当前行放到屏幕顶端</li>
<li>zb：把当前行放到屏幕底端</li>
<li>/string：查找；按n可以往下查找,N反向查找，和?string效果相同,支持正则表达式</li>
<li>set ignorecase/noignorecase：设置是否忽略大小写</li>
<li>:或/加上下箭头，可以翻看历史查询</li>
<li>/word>：查找单词word，不会查到类似words的词,但会匹配aword这类词</li>
<li>/\<word\>：只匹配word单词</word\></li>
<li>set hlsearch：搜索高亮处理</li>
<li>hlsearch：暂时关闭高亮，下次搜索还会按照原来设置的</li>
<li>set nowrapscan/wrapscan：设置搜索到头时要不要重新搜索</li>
<li>[n]G/gg：跳转到n行</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;很多时候需要用到vim，特别是查日志，学习一些常用的vim技巧还是很有必要的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;命令模式&quot;&gt;&lt;a href=&quot;#命令模式&quot; class=&quot;headerlink&quot; title=&quot;命令模式&quot;&gt;&lt;/a&gt;命
    
    </summary>
    
      <category term="vim" scheme="http://yoursite.com/categories/vim/"/>
    
    
      <category term="vim" scheme="http://yoursite.com/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>MAC下好用的工具推荐</title>
    <link href="http://yoursite.com/2016/12/14/mac-tools/"/>
    <id>http://yoursite.com/2016/12/14/mac-tools/</id>
    <published>2016-12-13T16:24:04.000Z</published>
    <updated>2017-03-07T01:55:57.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>越来越多的开发都用mac</p>
</blockquote>
<ul>
<li><p>autojump：文件夹跳转神器</p>
<ul>
<li>安装：<code>brew install autojump</code></li>
<li>安装完成后添加到shell中：<code>echo &#39; [[ -s $(brew --prefix)/etc/profile.d/autojump.sh ]] &amp;&amp; . $(brew --prefix)/etc/profile.d/autojump.sh&#39; &gt;&gt; ~/.bashrc &amp;&amp; source ~/.bashrc</code></li>
<li>然后就去浪吧：<code>j foldername</code></li>
</ul>
</li>
<li><p>应用程序在多屏幕及dashboard切换的’战斧’（ShortCat）</p>
<ul>
<li>快捷键切花应用程序所在dashboard，神器神器</li>
<li><a href="https://shortcatapp.com/" target="_blank" rel="external">下载地址</a></li>
</ul>
</li>
<li><p>CheatSheet,一键查看各个软件的快捷键</p>
<ul>
<li>直接长按command键，自己看效果吧</li>
<li><a href="https://itunes.apple.com/us/app/cheatsheet-quick-notes-widget-and-keyboard/id914665829?mt=8" target="_blank" rel="external">下载地址</a></li>
</ul>
</li>
<li><p>LICEcap，一款简单易用的截屏动图软件</p>
<ul>
<li>打开玩玩就会了，小而美的软件</li>
<li><a href="http://www.cockos.com/licecap/" target="_blank" rel="external">下载地址</a></li>
</ul>
</li>
<li><p>charles，强大的抓包软件</p>
<ul>
<li>功能强大，主要用到的功能就是其抓包和url rewrite功能，不过是收费软件，破解还是购买看个人了</li>
<li><a href="https://www.charlesproxy.com/" target="_blank" rel="external">下载地址</a></li>
</ul>
</li>
<li><p>atom，强大的文本编辑器</p>
<ul>
<li>强大的编辑器，支持各种插件扩展，个人感觉比sublime稍微重量级大一些，但插件挺牛，当初安装这款软件是看到有markdown转pdf的插件，方便易用。平时一般的单个文件打开用sublime，打开文件夹就开始用atom；很多插件可以自己去插件时长看看，挑几款需要的装起来</li>
<li><a href="https://atom.io/" target="_blank" rel="external">下载地址</a></li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;越来越多的开发都用mac&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;autojump：文件夹跳转神器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装：&lt;code&gt;brew install autojump&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;安装完成
    
    </summary>
    
      <category term="mac工具软件" scheme="http://yoursite.com/categories/mac%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="mac工具软件" scheme="http://yoursite.com/tags/mac%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式小记（java版）</title>
    <link href="http://yoursite.com/2016/12/13/java-regex/"/>
    <id>http://yoursite.com/2016/12/13/java-regex/</id>
    <published>2016-12-13T01:21:39.000Z</published>
    <updated>2016-12-14T14:08:58.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>正则表达式是一个比较好用的工具，但其比较难编写，特别是对于新手来说，更是觉得难写；<br>平时对一些常用的正则做个记录也是个不错的选择，需要用的时候直接拿来用;<br>下边的匹配在java代码中通常会需要<code>\\</code>来对<code>\</code>进行转义，比如<code>\w</code>在java代码中应该需要写成<code>\\w</code></p>
</blockquote>
<p><a href="http://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="external">参考文章</a></p>
<h2 id="比较常用的语法及demo"><a href="#比较常用的语法及demo" class="headerlink" title="比较常用的语法及demo"></a>比较常用的语法及demo</h2><h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><ul>
<li><code>.</code>:匹配除换行符以外的任意字符</li>
<li><code>\w</code>:匹配字母数字下划线</li>
<li><code>\s</code>:匹配空白符</li>
<li><code>\d</code>:匹配数字</li>
<li><code>\b</code>:匹配单词的开始或结束</li>
<li><code>^</code>:匹配字符串的开始</li>
<li><code>$</code>:匹配字符串的结束</li>
<li><code>\W</code>:匹配非字母数字下划线</li>
<li><code>\S</code>:匹配非空白符</li>
<li><code>\D</code>:匹配非数字</li>
<li><code>\B</code>:匹配非单词开头或结束的位置</li>
<li><code>[^x]</code>匹配除了x外的字符</li>
<li><code>[^abc]</code>:匹配除了abc外的字符</li>
</ul>
<h3 id="限定符（数量限定）"><a href="#限定符（数量限定）" class="headerlink" title="限定符（数量限定）"></a>限定符（数量限定）</h3><ul>
<li><code>*</code>:匹配0次或更多次</li>
<li><code>+</code>:匹配一次或更多次</li>
<li><code>?</code>:匹配0次货一次</li>
<li><code>{n}</code>:匹配n次</li>
<li><code>{n,}</code>:匹配n次或更多次</li>
<li><code>{n,m}</code>:匹配n到m次</li>
</ul>
<h3 id="其他匹配"><a href="#其他匹配" class="headerlink" title="其他匹配"></a>其他匹配</h3><ul>
<li><code>[abc]*</code>:匹配字符为a或b或c</li>
<li>或条件:<code>\(0\d{2}\)\d{8}|0\d{2}-?\d{8}</code>,可以匹配：<code>(010)92832482</code>或者<code>010-92832482</code>这两种格式的</li>
<li><code>()</code>:括号来表示分组,如<code>((010)|(020))+</code>能匹配<code>010010...</code>或<code>020020...</code>或者<code>010020...</code>或者<code>020010...</code></li>
<li><code>组号</code>:<code>\b(\w+)\b\s+\1\1\b</code></li>
</ul>
<h2 id="常用正则"><a href="#常用正则" class="headerlink" title="常用正则"></a>常用正则</h2><ul>
<li></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;正则表达式是一个比较好用的工具，但其比较难编写，特别是对于新手来说，更是觉得难写；&lt;br&gt;平时对一些常用的正则做个记录也是个不错的选择，需要用的时候直接拿来用;&lt;br&gt;下边的匹配在java代码中通常会需要&lt;code&gt;\\&lt;/code&gt;来对&lt;code
    
    </summary>
    
      <category term="java正则表达式" scheme="http://yoursite.com/categories/java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
    
      <category term="正则表达式" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>我的mac下iterm实用快捷键</title>
    <link href="http://yoursite.com/2016/11/17/iterm-key/"/>
    <id>http://yoursite.com/2016/11/17/iterm-key/</id>
    <published>2016-11-17T14:00:53.000Z</published>
    <updated>2016-11-17T14:12:31.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>ctrl+a/e：到行首/行尾</li>
<li>ctrl+f/b：前进/后退</li>
<li>ctrl+d/h：删除字符（前面or后面）</li>
<li>ctrl+p：前一条命令</li>
<li>ctrl+n：下一条命令</li>
<li>ctrl+r：查看历史命令，类似history</li>
<li>ctrl+k：从光标删除到行尾</li>
<li>Ctrl+w：删除从光标位置前到当前所处单词（Word）的开头</li>
<li>Ctrl+y：粘贴最后一次被删除的单词</li>
<li>command+t：新增标签</li>
<li>command+w：关闭当前标签</li>
<li>command+n：新增窗口</li>
<li>command+数字 command+箭头：切换tab</li>
<li>command+f：查找</li>
<li>command+enter：全屏/缩小</li>
<li>command+d：分屏（竖屏）</li>
<li>command+shift+d：分屏（横屏）</li>
<li>command+option+箭头 command+[/]：切屏</li>
<li>command+shift+h：查看历史剪贴板itermkey</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;ctrl+a/e：到行首/行尾&lt;/li&gt;
&lt;li&gt;ctrl+f/b：前进/后退&lt;/li&gt;
&lt;li&gt;ctrl+d/h：删除字符（前面or后面）&lt;/li&gt;
&lt;li&gt;ctrl+p：前一条命令&lt;/li&gt;
&lt;li&gt;ctrl+n：下一条命令&lt;/li&gt;
&lt;li&gt;ctrl+r：
    
    </summary>
    
      <category term="快捷键" scheme="http://yoursite.com/categories/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
    
      <category term="iterm快捷键" scheme="http://yoursite.com/tags/iterm%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
  </entry>
  
  <entry>
    <title>guava 源码之 Lists transform的坑</title>
    <link href="http://yoursite.com/2016/11/14/guava-transform/"/>
    <id>http://yoursite.com/2016/11/14/guava-transform/</id>
    <published>2016-11-14T15:05:11.000Z</published>
    <updated>2017-03-24T01:19:23.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>google的guava提供了很方便的操作，特别是集合操作；<br>但今天遇到了个神坑，看了源码才搞定，这里通过源码来分享下；</p>
</blockquote>
<h2 id="经过"><a href="#经过" class="headerlink" title="经过"></a>经过</h2><ul>
<li>项目里的代码将PO List转成DTO List，这个时候是通过Lists的transform方法来做的</li>
<li>但是DTO还需要其他属性来丰富，这个时候，通过for循环将其他的一些属性设置到DTO List的对象中去</li>
<li>结果，没设置进去</li>
<li>开发大杀器（debug）上，断点到for<code>for(DTO dto : dtoList)</code>循环里，在for循环代码块里发现一个比较奇特的现象，dto的数据变了，但dtoList里的数据没变</li>
<li>想想没道理呀，这两货不是同一个引用吗，怎么会出现这种情况呢？</li>
<li>然后开始怀疑人生，找了帮手一起看了下，也看不出来，后来，帮手提醒了一句：看看对象的地址是什么</li>
<li>这个时候开始发现，debug的时候，每次鼠标放到dtoList上的时候，这个List里边的元素的对象地址一直在变</li>
<li>找到原因了就好办了，一步一步debug，最终发现问题出在了Lists.transform上了</li>
</ul>
<h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><h3 id="下边是一个比较简单的demo"><a href="#下边是一个比较简单的demo" class="headerlink" title="下边是一个比较简单的demo"></a>下边是一个比较简单的demo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; intList = Lists.newArrayList(<span class="number">1000000</span>, <span class="number">200000</span>);</div><div class="line">List&lt;Integer&gt; intList1 = Lists.transform(intList, <span class="keyword">new</span> Function&lt;Integer, Integer&gt;() &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">apply</span><span class="params">(Integer input)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> input + <span class="number">100000000</span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">intList1.get(<span class="number">0</span>);</div></pre></td></tr></table></figure>
<p>代码比较简单，就是对intList加工后返回intList1；<br>这个时候debug断点打到<code>intList1.get(0);</code>这行，然后用鼠标上浮的方式查看intList1里边的元素的地址<br>下边是两次鼠标放上去看的内存地址<br><img src="/images/WechatIMG1.jpeg" alt="Alt text"><br><img src="/images/WechatIMG2.jpeg" alt="Alt text"></p>
<p>从截图中可以看出，这个List的真实类型为<code>TransformingRandomAccessList</code>，这个List有什么特殊呢<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TransformingRandomAccessList</span>&lt;<span class="title">F</span>, <span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">T</span>&gt;</span></div><div class="line">      <span class="keyword">implements</span> <span class="title">RandomAccess</span>, <span class="title">Serializable</span> &#123;</div><div class="line">    <span class="keyword">final</span> List&lt;F&gt; fromList;</div><div class="line">    <span class="keyword">final</span> Function&lt;? <span class="keyword">super</span> F, ? extends T&gt; function;</div><div class="line"></div><div class="line">    TransformingRandomAccessList(List&lt;F&gt; fromList, Function&lt;? <span class="keyword">super</span> F, ? extends T&gt; function) &#123;</div><div class="line">      <span class="keyword">this</span>.fromList = checkNotNull(fromList);</div><div class="line">      <span class="keyword">this</span>.function = checkNotNull(function);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">      fromList.clear();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> function.apply(fromList.get(index));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;T&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> listIterator();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ListIterator&lt;T&gt; <span class="title">listIterator</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> TransformedListIterator&lt;F, T&gt;(fromList.listIterator(index)) &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function">T <span class="title">transform</span><span class="params">(F from)</span> </span>&#123;</div><div class="line">          <span class="keyword">return</span> function.apply(from);</div><div class="line">        &#125;</div><div class="line">      &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> fromList.isEmpty();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> function.apply(fromList.remove(index));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> fromList.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>看到源码就明白了，每次<code>get</code>或<code>iterator</code>都会从新调用<code>function.apply</code>方法，而上边的function的apply方法是<code>return input + 100000000;</code>重新new了对象来返回，我在项目的代码里也是重新new了DTO来返回的；<br>到这里所有的都明白了；</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>Lists的transform是挺好用的，但是只适合不对transform后的List的元素做丰富属性的操作；如果非要用，那么在循环List的时候，重新把元素add到新的List中，然后返回新的List，但这种做法太别扭了；transform的方法还是考虑场景慎用吧</li>
<li>不知道这是guava故意这么做的还是真的是个坑，个人还没有get到这么做的意图</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;google的guava提供了很方便的操作，特别是集合操作；&lt;br&gt;但今天遇到了个神坑，看了源码才搞定，这里通过源码来分享下；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;经过&quot;&gt;&lt;a href=&quot;#经过&quot; class=&quot;headerlin
    
    </summary>
    
      <category term="guava" scheme="http://yoursite.com/categories/guava/"/>
    
    
      <category term="guava" scheme="http://yoursite.com/tags/guava/"/>
    
      <category term="Lists" scheme="http://yoursite.com/tags/Lists/"/>
    
      <category term="坑" scheme="http://yoursite.com/tags/%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>joda-collection 之 Grid解析</title>
    <link href="http://yoursite.com/2016/11/08/joda-collection/"/>
    <id>http://yoursite.com/2016/11/08/joda-collection/</id>
    <published>2016-11-08T14:04:04.000Z</published>
    <updated>2016-11-10T14:44:17.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>joda-collection官网说明了是提供jdk和guava之外的collection操作，所以提供了Grid操作；<br>Grid顾名思义就是网格的意思，也就是有个<strong>(x,y)</strong>坐标确定一个元素；</p>
</blockquote>
<h2 id="如何引入"><a href="#如何引入" class="headerlink" title="如何引入"></a>如何引入</h2><p>现在基本都是采用maven构建方式，在需要的项目pom中添加依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.joda<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joda-collect<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><h3 id="继承关系"><a href="#继承关系" class="headerlink" title="继承关系"></a>继承关系</h3><ul>
<li><code>Grid</code>定义为接口，<code>AbstractGrid</code>为实现该接口的抽象类</li>
<li><code>DenseGrid</code>，<code>ImmutableGrid</code>（抽象类），<code>SparseGrid</code>均实现了<code>AbstractGrid</code>抽象类</li>
<li><code>DenseImmutableGrid</code>，<code>EmptyGrid</code>，<code>SingletonGrid</code>，<code>SparseImmutableGrid</code>实现了<code>Immutable</code>抽象类</li>
<li>其中<code>AbstractGrid</code>，<code>DenseImmutableGrid</code>，<code>EmptyGrid</code>，<code>SingletonGrid</code>和<code>SparseImmutableGrid</code>为包访问权限</li>
</ul>
<h3 id="看代码"><a href="#看代码" class="headerlink" title="看代码"></a>看代码</h3><h4 id="ImmutableGrid的copyOf方法"><a href="#ImmutableGrid的copyOf方法" class="headerlink" title="ImmutableGrid的copyOf方法"></a><strong>ImmutableGrid</strong>的<strong>copyOf</strong>方法</h4><p>  该方法为从<strong>grid</strong>获取到具有<code>immutable</code>的<strong>grid</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;R&gt; <span class="function">ImmutableGrid&lt;R&gt; <span class="title">copyOf</span><span class="params">(Grid&lt;R&gt; grid)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (grid == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Grid must not be null"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (grid <span class="keyword">instanceof</span> ImmutableGrid) &#123;</div><div class="line">        <span class="keyword">return</span> (ImmutableGrid&lt;R&gt;) grid;</div><div class="line">    &#125;</div><div class="line">    validateCounts(grid.rowCount(), grid.<span class="function">columnCount</span></div><div class="line">    <span class="title">if</span> <span class="params">(grid.size()</span> == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EmptyGrid&lt;R&gt;(grid.rowCount(), grid.columnCount());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (grid.size() == <span class="number">1</span>) &#123;</div><div class="line">        Cell&lt;R&gt; cell = grid.cells().iterator().next();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SingletonGrid&lt;R&gt;(grid.rowCount(), grid.columnCount(), cell);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (grid.size() &gt;= (grid.rowCount() * grid.columnCount() / <span class="number">2</span>)) &#123;</div><div class="line">        <span class="keyword">return</span> DenseImmutableGrid.create(grid);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SparseImmutableGrid&lt;R&gt;(grid);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>如果grid为空的，那么返回EmptyGrid；其实返回这个用处不大，本来就是个immutable的，不能往里插数据</li>
<li>如果grid所持有的对象个数为1，那么返回的是SingletonGrid；</li>
<li>如果grid所持有的对象个数大于等于grid总大小的一般，就用DenseImmutableGrid（非稀疏的不可变grid），否则返回的是SparseImmutableGrid（稀疏的不可变grid）</li>
</ul>
<h4 id="关于稀疏（dense）grid和非稀疏-sparse-grid"><a href="#关于稀疏（dense）grid和非稀疏-sparse-grid" class="headerlink" title="关于稀疏（dense）grid和非稀疏(sparse)grid"></a>关于稀疏（dense）grid和非稀疏(sparse)grid</h4><blockquote>
<p>两者的区别在于存储的方式不同：dense采用的的数组的方式存储信息，而sparse采用<code>SortedSet&lt;Cell&lt;V&gt;&gt;</code>来作为存储结构；下边先介绍Cell是什么玩意</p>
</blockquote>
<p><strong>Cell</strong>接口是<strong>Grid</strong>的一个内部接口，<strong>MutableCell</strong>和<strong>ImmutableCell</strong>采用相同的存储结构且都实现<strong>AbstractCell</strong>抽象类，存储结构为<code>row，column，value</code></p>
<h5 id="接下来看看SparseGrid的实现"><a href="#接下来看看SparseGrid的实现" class="headerlink" title="接下来看看SparseGrid的实现"></a>接下来看看SparseGrid的实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> rowCount;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> columnCount;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> SortedSet&lt;Cell&lt;V&gt;&gt; cells;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;R&gt; <span class="function">SparseGrid&lt;R&gt; <span class="title">create</span><span class="params">(<span class="keyword">int</span> rowCount, <span class="keyword">int</span> columnCount)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SparseGrid&lt;R&gt;(rowCount, columnCount, <span class="keyword">new</span> TreeSet&lt;Cell&lt;R&gt;&gt;(AbstractCell.&lt;R&gt;comparator()));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先，通过SortedSet来存储，在creat方法中可以看到，实际采用的是SortedSet的实现类TreeSet来存储；然后存储总行数和总列数；为什么不直接声明为TreeSet来存储呢，主要是为了扩展性考虑，面向接口编程嘛；对于稀疏的采用Set来存储而不是数组，可以节省存储空间</p>
<p>AbstractCell实现了Comparator接口，利用row和column来进行排序；</p>
<p>cell(int row, int column)方法来获取指定的cell<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Cell&lt;V&gt; <span class="title">cell</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> column)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (exists(row, column)) &#123;</div><div class="line">        SortedSet&lt;Cell&lt;V&gt;&gt; tail = cells.tailSet(finder(row, column));</div><div class="line">        <span class="keyword">if</span> (tail.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">            Cell&lt;V&gt; cell = tail.first();</div><div class="line">            <span class="keyword">if</span> (cell.getRow() == row &amp;&amp; cell.getColumn() == column) &#123;</div><div class="line">                <span class="keyword">return</span> cell;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exists</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> column)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> row &gt;= <span class="number">0</span> &amp;&amp; row &lt; rowCount() &amp;&amp; column &gt;= <span class="number">0</span> &amp;&amp; column &lt; columnCount();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过SortedSet来查询具体的cell；</p>
<h5 id="再来看看DenseGrid"><a href="#再来看看DenseGrid" class="headerlink" title="再来看看DenseGrid"></a>再来看看DenseGrid</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> rowCount;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> columnCount;</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> size;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> V[] values;</div></pre></td></tr></table></figure>
<p>从代码里看出，采用的是数组的存储方式，因为当数据比较稠密的时候，浪费的空间的少量的，这种方式相比较SparseGrid，效率会高，实现比较简单；<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;V&gt; <span class="function">DenseGrid&lt;V&gt; <span class="title">create</span><span class="params">(<span class="keyword">int</span> rowCount, <span class="keyword">int</span> columnCount)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DenseGrid&lt;V&gt;(rowCount, columnCount);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">DenseGrid</span><span class="params">(<span class="keyword">int</span> rowCount, <span class="keyword">int</span> columnCount)</span> </span>&#123;</div><div class="line">    validateCounts(rowCount, columnCount);</div><div class="line">    <span class="keyword">this</span>.rowCount = rowCount;</div><div class="line">    <span class="keyword">this</span>.columnCount = columnCount;</div><div class="line">    <span class="keyword">this</span>.values = (V[]) <span class="keyword">new</span> Object[rowCount * columnCount];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>代码里可以看出来，最开始构造方法就已经分配了最大容量的数组；<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> column)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (exists(row, column)) &#123;</div><div class="line">        <span class="keyword">return</span> values[row * columnCount + column];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Cell&lt;V&gt; <span class="title">cell</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> column)</span> </span>&#123;</div><div class="line">    V value = get(row, column);</div><div class="line">    <span class="keyword">return</span> (value != <span class="keyword">null</span> ? ImmutableCell.of(row, column, value) : <span class="keyword">null</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>从get的代码可以看出来，就是简单的数组下标定位，效率非常高；其他一些需要get的操作都是通过数组下标的方式来做的，例如<strong>public List<v> column(int column)</v></strong>和<strong>public List<v> row(int row)</v></strong>等方法；</p>
<blockquote>
<p>总结下，稀疏Grid和非稀疏Grid最大的区别就是以时间换空间还是以空间换时间的问题；通过不同的存储结构来实现；</p>
</blockquote>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>从Grid的源码分析来看，执行效率还是不错的</li>
<li>Grid的使用场景还是有一些的，比如一些业务场景中的需要多个map来实现的业务逻辑，可以考虑Grid的实现方式，看看哪种实现方式更方便及效率更高；</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;joda-collection官网说明了是提供jdk和guava之外的collection操作，所以提供了Grid操作；&lt;br&gt;Grid顾名思义就是网格的意思，也就是有个&lt;strong&gt;(x,y)&lt;/strong&gt;坐标确定一个元素；&lt;/p&gt;
&lt;/b
    
    </summary>
    
      <category term="joda" scheme="http://yoursite.com/categories/joda/"/>
    
    
      <category term="joda-collection" scheme="http://yoursite.com/tags/joda-collection/"/>
    
      <category term="Grid" scheme="http://yoursite.com/tags/Grid/"/>
    
  </entry>
  
</feed>
