<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿骨打</title>
  <subtitle>不是完颜的那个</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-11-10T14:44:17.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>阿骨打</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>joda-collection 之 Grid解析</title>
    <link href="http://yoursite.com/2016/11/08/hello-world/"/>
    <id>http://yoursite.com/2016/11/08/hello-world/</id>
    <published>2016-11-08T14:04:04.000Z</published>
    <updated>2016-11-10T14:44:17.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>joda-collection官网说明了是提供jdk和guava之外的collection操作，所以提供了Grid操作；<br>Grid顾名思义就是网格的意思，也就是有个<strong>(x,y)</strong>坐标确定一个元素；</p>
</blockquote>
<h2 id="如何引入"><a href="#如何引入" class="headerlink" title="如何引入"></a>如何引入</h2><p>现在基本都是采用maven构建方式，在需要的项目pom中添加依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.joda<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joda-collect<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><h3 id="继承关系"><a href="#继承关系" class="headerlink" title="继承关系"></a>继承关系</h3><ul>
<li><code>Grid</code>定义为接口，<code>AbstractGrid</code>为实现该接口的抽象类</li>
<li><code>DenseGrid</code>，<code>ImmutableGrid</code>（抽象类），<code>SparseGrid</code>均实现了<code>AbstractGrid</code>抽象类</li>
<li><code>DenseImmutableGrid</code>，<code>EmptyGrid</code>，<code>SingletonGrid</code>，<code>SparseImmutableGrid</code>实现了<code>Immutable</code>抽象类</li>
<li>其中<code>AbstractGrid</code>，<code>DenseImmutableGrid</code>，<code>EmptyGrid</code>，<code>SingletonGrid</code>和<code>SparseImmutableGrid</code>为包访问权限</li>
</ul>
<h3 id="看代码"><a href="#看代码" class="headerlink" title="看代码"></a>看代码</h3><h4 id="ImmutableGrid的copyOf方法"><a href="#ImmutableGrid的copyOf方法" class="headerlink" title="ImmutableGrid的copyOf方法"></a><strong>ImmutableGrid</strong>的<strong>copyOf</strong>方法</h4><p>  该方法为从<strong>grid</strong>获取到具有<code>immutable</code>的<strong>grid</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;R&gt; <span class="function">ImmutableGrid&lt;R&gt; <span class="title">copyOf</span><span class="params">(Grid&lt;R&gt; grid)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (grid == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Grid must not be null"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (grid <span class="keyword">instanceof</span> ImmutableGrid) &#123;</div><div class="line">        <span class="keyword">return</span> (ImmutableGrid&lt;R&gt;) grid;</div><div class="line">    &#125;</div><div class="line">    validateCounts(grid.rowCount(), grid.<span class="function">columnCount</span></div><div class="line">    <span class="title">if</span> <span class="params">(grid.size()</span> == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EmptyGrid&lt;R&gt;(grid.rowCount(), grid.columnCount());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (grid.size() == <span class="number">1</span>) &#123;</div><div class="line">        Cell&lt;R&gt; cell = grid.cells().iterator().next();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SingletonGrid&lt;R&gt;(grid.rowCount(), grid.columnCount(), cell);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (grid.size() &gt;= (grid.rowCount() * grid.columnCount() / <span class="number">2</span>)) &#123;</div><div class="line">        <span class="keyword">return</span> DenseImmutableGrid.create(grid);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SparseImmutableGrid&lt;R&gt;(grid);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>如果grid为空的，那么返回EmptyGrid；其实返回这个用处不大，本来就是个immutable的，不能往里插数据</li>
<li>如果grid所持有的对象个数为1，那么返回的是SingletonGrid；</li>
<li>如果grid所持有的对象个数大于等于grid总大小的一般，就用DenseImmutableGrid（非稀疏的不可变grid），否则返回的是SparseImmutableGrid（稀疏的不可变grid）</li>
</ul>
<h4 id="关于稀疏（dense）grid和非稀疏-sparse-grid"><a href="#关于稀疏（dense）grid和非稀疏-sparse-grid" class="headerlink" title="关于稀疏（dense）grid和非稀疏(sparse)grid"></a>关于稀疏（dense）grid和非稀疏(sparse)grid</h4><blockquote>
<p>两者的区别在于存储的方式不同：dense采用的的数组的方式存储信息，而sparse采用<code>SortedSet&lt;Cell&lt;V&gt;&gt;</code>来作为存储结构；下边先介绍Cell是什么玩意</p>
</blockquote>
<p><strong>Cell</strong>接口是<strong>Grid</strong>的一个内部接口，<strong>MutableCell</strong>和<strong>ImmutableCell</strong>采用相同的存储结构且都实现<strong>AbstractCell</strong>抽象类，存储结构为<code>row，column，value</code></p>
<h5 id="接下来看看SparseGrid的实现"><a href="#接下来看看SparseGrid的实现" class="headerlink" title="接下来看看SparseGrid的实现"></a>接下来看看SparseGrid的实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> rowCount;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> columnCount;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> SortedSet&lt;Cell&lt;V&gt;&gt; cells;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;R&gt; <span class="function">SparseGrid&lt;R&gt; <span class="title">create</span><span class="params">(<span class="keyword">int</span> rowCount, <span class="keyword">int</span> columnCount)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SparseGrid&lt;R&gt;(rowCount, columnCount, <span class="keyword">new</span> TreeSet&lt;Cell&lt;R&gt;&gt;(AbstractCell.&lt;R&gt;comparator()));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先，通过SortedSet来存储，在creat方法中可以看到，实际采用的是SortedSet的实现类TreeSet来存储；然后存储总行数和总列数；为什么不直接声明为TreeSet来存储呢，主要是为了扩展性考虑，面向接口编程嘛；对于稀疏的采用Set来存储而不是数组，可以节省存储空间</p>
<p>AbstractCell实现了Comparator接口，利用row和column来进行排序；</p>
<p>cell(int row, int column)方法来获取指定的cell<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Cell&lt;V&gt; <span class="title">cell</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> column)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (exists(row, column)) &#123;</div><div class="line">        SortedSet&lt;Cell&lt;V&gt;&gt; tail = cells.tailSet(finder(row, column));</div><div class="line">        <span class="keyword">if</span> (tail.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">            Cell&lt;V&gt; cell = tail.first();</div><div class="line">            <span class="keyword">if</span> (cell.getRow() == row &amp;&amp; cell.getColumn() == column) &#123;</div><div class="line">                <span class="keyword">return</span> cell;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exists</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> column)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> row &gt;= <span class="number">0</span> &amp;&amp; row &lt; rowCount() &amp;&amp; column &gt;= <span class="number">0</span> &amp;&amp; column &lt; columnCount();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过SortedSet来查询具体的cell；</p>
<h5 id="再来看看DenseGrid"><a href="#再来看看DenseGrid" class="headerlink" title="再来看看DenseGrid"></a>再来看看DenseGrid</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> rowCount;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> columnCount;</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> size;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> V[] values;</div></pre></td></tr></table></figure>
<p>从代码里看出，采用的是数组的存储方式，因为当数据比较稠密的时候，浪费的空间的少量的，这种方式相比较SparseGrid，效率会高，实现比较简单；<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;V&gt; <span class="function">DenseGrid&lt;V&gt; <span class="title">create</span><span class="params">(<span class="keyword">int</span> rowCount, <span class="keyword">int</span> columnCount)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DenseGrid&lt;V&gt;(rowCount, columnCount);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">DenseGrid</span><span class="params">(<span class="keyword">int</span> rowCount, <span class="keyword">int</span> columnCount)</span> </span>&#123;</div><div class="line">    validateCounts(rowCount, columnCount);</div><div class="line">    <span class="keyword">this</span>.rowCount = rowCount;</div><div class="line">    <span class="keyword">this</span>.columnCount = columnCount;</div><div class="line">    <span class="keyword">this</span>.values = (V[]) <span class="keyword">new</span> Object[rowCount * columnCount];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>代码里可以看出来，最开始构造方法就已经分配了最大容量的数组；<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> column)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (exists(row, column)) &#123;</div><div class="line">        <span class="keyword">return</span> values[row * columnCount + column];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Cell&lt;V&gt; <span class="title">cell</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> column)</span> </span>&#123;</div><div class="line">    V value = get(row, column);</div><div class="line">    <span class="keyword">return</span> (value != <span class="keyword">null</span> ? ImmutableCell.of(row, column, value) : <span class="keyword">null</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>从get的代码可以看出来，就是简单的数组下标定位，效率非常高；其他一些需要get的操作都是通过数组下标的方式来做的，例如<strong>public List<v> column(int column)</v></strong>和<strong>public List<v> row(int row)</v></strong>等方法；</p>
<blockquote>
<p>总结下，稀疏Grid和非稀疏Grid最大的区别就是以时间换空间还是以空间换时间的问题；通过不同的存储结构来实现；</p>
</blockquote>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>从Grid的源码分析来看，执行效率还是不错的</li>
<li>Grid的使用场景还是有一些的，比如一些业务场景中的需要多个map来实现的业务逻辑，可以考虑Grid的实现方式，看看哪种实现方式更方便及效率更高；</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;joda-collection官网说明了是提供jdk和guava之外的collection操作，所以提供了Grid操作；&lt;br&gt;Grid顾名思义就是网格的意思，也就是有个&lt;strong&gt;(x,y)&lt;/strong&gt;坐标确定一个元素；&lt;/p&gt;
&lt;/b
    
    </summary>
    
      <category term="joda" scheme="http://yoursite.com/categories/joda/"/>
    
    
      <category term="joda-collection" scheme="http://yoursite.com/tags/joda-collection/"/>
    
      <category term="Grid" scheme="http://yoursite.com/tags/Grid/"/>
    
  </entry>
  
</feed>
